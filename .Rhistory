circos.initializeWithIdeogram(plotType = NULL,chromosome.index = unique(SNV$chr))
circos.genomicIdeogram(track.height = 0.05)
circos.track(track.index = get.current.track.index(), panel.fun = function(x, y) {
chr = get.cell.meta.data("sector.index") %>% str_replace("chr","")
xcenter = get.cell.meta.data("xcenter")
ycenter = get.cell.meta.data("ylim")[2]
circos.text(xcenter, ycenter, chr,adj = c(0.5,-1.0)) # adj = position of  chromosome label
# circos.genomicAxis(h = "top") # for ticks and axis (coordinates)
})
# snp tract
circos.track(factors=unique(SNV$chr), ylim=c(0,1),track.height =0.15,bg.border="#00000030") # initialize empty track
for(chr in unique(SNV$chr)) {
# grey lines in background
for(lvl in c(0.25,0.5,0.75)){
circos.lines(get.cell.meta.data(name="xlim",sector.index = chr), c(lvl,lvl),col="grey", sector.index=chr)
}
# snv points
circos.points(x=SNV[SNV$chr==chr,]$start,
y=SNV[SNV$chr==chr,]$vaf,
sector.index=chr,
col=snp_pal[SNV[SNV$chr==chr,]$type],
pch=20,cex=0.5)
}
# copy number tract
cnv_ymax = ceiling(max(CNV$tCN))
circos.track(factors=unique(SNV$chr), ylim=c(0,cnv_ymax),track.height =0.2,bg.border="#00000030",bg.col="#00000007")
for(CHR in unique(SNV$chr)) {
# grey lines in background
for(lvl in 1:(cnv_ymax-1)){
circos.lines(get.cell.meta.data(name="xlim",sector.index = CHR), c(lvl,lvl),col="grey", sector.index=CHR)
}
# cnv points
CNV[CNV$chr==CHR,] %>%
with(circos.points(x=(start+end)/2,y=tCN,sector.index=CHR,
col=colorRamp2(c(1,1.5,2.5,3),c("blue","grey","grey","red"))(tCN),
pch=20,cex=0.3))
# black horizontal line at total copy number==2
circos.lines(get.cell.meta.data(name="xlim",sector.index = CHR), c(2,2),col="black", sector.index=CHR)
}
circos.track(factors=unique(SNV$chr), ylim=c(0,cnv_ymax),track.height =0.2,bg.border="#00000030",bg.col="#90efa807")
circos.track(factors=unique(SNV$chr), ylim=c(0,cnv_ymax),track.height =0.2,bg.border="#00000030",bg.col="#90efa820")
circos.clear()
circos.par("start.degree" = 90, # start from 12 oclock direction
cell.padding	=c(0.00, 1.00, 0.00, 1.00)) # exact ylim will be applied
# ideogram
circos.initializeWithIdeogram(plotType = NULL,chromosome.index = unique(SNV$chr))
circos.genomicIdeogram(track.height = 0.05)
circos.track(track.index = get.current.track.index(), panel.fun = function(x, y) {
chr = get.cell.meta.data("sector.index") %>% str_replace("chr","")
xcenter = get.cell.meta.data("xcenter")
ycenter = get.cell.meta.data("ylim")[2]
circos.text(xcenter, ycenter, chr,adj = c(0.5,-1.0)) # adj = position of  chromosome label
# circos.genomicAxis(h = "top") # for ticks and axis (coordinates)
})
# snp tract
circos.track(factors=unique(SNV$chr), ylim=c(0,1),track.height =0.15,bg.border="#00000030") # initialize empty track
for(chr in unique(SNV$chr)) {
# grey lines in background
for(lvl in c(0.25,0.5,0.75)){
circos.lines(get.cell.meta.data(name="xlim",sector.index = chr), c(lvl,lvl),col="grey", sector.index=chr)
}
# snv points
circos.points(x=SNV[SNV$chr==chr,]$start,
y=SNV[SNV$chr==chr,]$vaf,
sector.index=chr,
col=snp_pal[SNV[SNV$chr==chr,]$type],
pch=20,cex=0.5)
}
# copy number tract
cnv_ymax = ceiling(max(CNV$tCN))
circos.track(factors=unique(SNV$chr), ylim=c(0,cnv_ymax),track.height =0.2,bg.border="#00000030",bg.col="#90efa820")
circos.track(factors=unique(SNV$chr), ylim=c(0,cnv_ymax),track.height =0.2,bg.border="#00000030",bg.col="#90efa810")
circos.clear()
circos.par("start.degree" = 90, # start from 12 oclock direction
cell.padding	=c(0.00, 1.00, 0.00, 1.00)) # exact ylim will be applied
# ideogram
circos.initializeWithIdeogram(plotType = NULL,chromosome.index = unique(SNV$chr))
circos.genomicIdeogram(track.height = 0.05)
circos.track(track.index = get.current.track.index(), panel.fun = function(x, y) {
chr = get.cell.meta.data("sector.index") %>% str_replace("chr","")
xcenter = get.cell.meta.data("xcenter")
ycenter = get.cell.meta.data("ylim")[2]
circos.text(xcenter, ycenter, chr,adj = c(0.5,-1.0)) # adj = position of  chromosome label
# circos.genomicAxis(h = "top") # for ticks and axis (coordinates)
})
# snp tract
circos.track(factors=unique(SNV$chr), ylim=c(0,1),track.height =0.15,bg.border="#00000030") # initialize empty track
for(chr in unique(SNV$chr)) {
# grey lines in background
for(lvl in c(0.25,0.5,0.75)){
circos.lines(get.cell.meta.data(name="xlim",sector.index = chr), c(lvl,lvl),col="grey", sector.index=chr)
}
# snv points
circos.points(x=SNV[SNV$chr==chr,]$start,
y=SNV[SNV$chr==chr,]$vaf,
sector.index=chr,
col=snp_pal[SNV[SNV$chr==chr,]$type],
pch=20,cex=0.5)
}
# copy number tract
cnv_ymax = ceiling(max(CNV$tCN))
circos.track(factors=unique(SNV$chr), ylim=c(0,cnv_ymax),track.height =0.2,bg.border="#00000030",bg.col="#90efa810")
for(CHR in unique(SNV$chr)) {
# grey lines in background
for(lvl in 1:(cnv_ymax-1)){
circos.lines(get.cell.meta.data(name="xlim",sector.index = CHR), c(lvl,lvl),col="grey", sector.index=CHR)
}
# cnv points
CNV[CNV$chr==CHR,] %>%
with(circos.points(x=(start+end)/2,y=tCN,sector.index=CHR,
col=colorRamp2(c(1,1.5,2.5,3),c("blue","grey","grey","red"))(tCN),
pch=20,cex=0.3))
# black horizontal line at total copy number==2
circos.lines(get.cell.meta.data(name="xlim",sector.index = CHR), c(2,2),col="black", sector.index=CHR)
}
if(StVstyle == 1){
baseline1=get.cell.meta.data("cell.bottom.radius")
baseline2=get.cell.meta.data("cell.bottom.radius")
height1=0.1
height2=0.1
}else if(StVstyle == 2){
height1=0.035
height2=-0.035
circos.track(factors=unique(SNV$chr), ylim=c(0,2),track.height =0.1,bg.border="#00000000")
baseline1=(get.cell.meta.data("cell.bottom.radius")+get.cell.meta.data("cell.top.radius"))/2
baseline2=baseline1
for(CHR in unique(SNV$chr)) {
circos.lines(get.cell.meta.data(name="xlim",sector.index = CHR), c(1,1),col="#00000030", sector.index=CHR)
}
}else if(StVstyle == 3){
height1=0.035
height2=-0.035
circos.track(factors=unique(SNV$chr), ylim=c(0,4),track.height =0.14,bg.border="#00000000")
baseline1=(get.cell.meta.data("cell.bottom.radius")+3*get.cell.meta.data("cell.top.radius"))/4
baseline2=(get.cell.meta.data("cell.bottom.radius")*3+get.cell.meta.data("cell.top.radius"))/4
for(CHR in unique(SNV$chr)) {
circos.lines(get.cell.meta.data(name="xlim",sector.index = CHR), c(1,1),col="#00000030", sector.index=CHR)
circos.lines(get.cell.meta.data(name="xlim",sector.index = CHR), c(3,3),col="#00000030", sector.index=CHR)
}
}
for (i in 1:nrow(StV)){
circos.link(sector.index1 = StV$chr[i], c(StV$start[i], StV$end[i]),
sector.index2 = StV$chr_[i], c(StV$start_[i], StV$end_[i]),
col = line_pal[StV$type[i]],
h=switch(StV$type[i],"5>5"=height1,"3>3"=height1,"5>3"=height2,"3>5"=height2,"interchromosomal"=NULL),
rou=ifelse(StV$type[i] %in% c("5>5","3>3"), baseline1,baseline2))
}
lgd1=legend("bottomright",pch=21, legend=names(snp_pal),pt.bg=snp_pal)
lgd2=legend("bottomright",lty=1, legend=names(line_pal),col=line_pal)
lgd1
lgd2=legend(lgd2$rect$right,lgd2$rect$top,pch=21, legend=names(snp_pal),pt.bg=snp_pal,adj=c(1,1))
lgd2$rect$right
lgd2=legend(lgd1$rect$right,lgd1$rect$top,pch=21, legend=names(snp_pal),pt.bg=snp_pal,adj=c(1,1))
lgd1$rect$right
lgd2=legend(lgd1$rect$left+lgd1$rect$w,lgd1$rect$top,pch=21, legend=names(snp_pal),pt.bg=snp_pal,adj=c(1,1))
lgd2=legend(lgd1$rect$left+lgd1$rect$w,lgd1$rect$top,pch=21, legend=names(snp_pal),pt.bg=snp_pal,adj=c(0,1))
lgd2=legend(lgd1$rect$left+lgd1$rect$w,lgd1$rect$top,pch=21, legend=names(snp_pal),pt.bg=snp_pal,adj=c(1,0))
lgd1=legend("bottomright",lty=1, legend=names(line_pal),col=line_pal)
lgd1$rect$left
lgd1$rect
lgd1$rect$left+lgd1$rect$w
lgd2=legend(lgd1$rect$left+lgd1$rect$w,lgd1$rect$top,pch=21, legend=names(snp_pal),pt.bg=snp_pal,adj=c(0.5,0.5))
lgd2=legend(lgd1$rect$left+lgd1$rect$w,lgd1$rect$top,pch=21, legend=names(snp_pal),pt.bg=snp_pal,adj=c(0.5,0.5),bg="red")
lgd2=legend(lgd1$rect$left,lgd1$rect$top,pch=21, legend=names(snp_pal),pt.bg=snp_pal,adj=c(0.5,0.5),bg="red")
lgd2=legend(lgd1$rect$left,lgd1$rect$top,pch=21, legend=names(snp_pal),pt.bg=snp_pal,xjust = 0.5,bg="red")
lgd2=legend(lgd1$rect$left,lgd1$rect$top,pch=21, legend=names(snp_pal),pt.bg=snp_pal,xjust = 0,bg="red")
lgd2=legend(lgd1$rect$left,lgd1$rect$top,pch=21, legend=names(snp_pal),pt.bg=snp_pal,xjust = 1,bg="red")
lgd2=legend(lgd1$rect$left,lgd1$rect$top,pch=21, legend=names(snp_pal),pt.bg=snp_pal,xjust = 1,yjust=1,bg="red")
lgd2=legend(lgd1$rect$left,lgd1$rect$top,pch=21, legend=names(snp_pal),pt.bg=snp_pal,xjust = 1,yjust=0,bg="red")
lgd2=legend(lgd1$rect$left+lgd1$rect$w,lgd1$rect$top,pch=21, legend=names(snp_pal),pt.bg=snp_pal,xjust = 1,yjust=0,bg="red")
lgd1=legend("bottomright",lty=1, legend=names(line_pal),col=line_pal)
lgd2=legend(lgd1$rect$left+lgd1$rect$w,lgd1$rect$top,pch=21, legend=names(snp_pal),pt.bg=snp_pal,xjust = 1,yjust=0)
circos(StVstyle=2)
title("sample name")
text(0, 0, "This is\nthe center", cex = 1.5)
text(0.2, 0.2, "*", cex = 1.5)
lgd1=legend("bottomleft",lty=1, legend=names(line_pal),col=line_pal,bty='n')
lgd2=legend(lgd1$rect$left,lgd1$rect$top,pch=21, legend=names(snp_pal),pt.bg=snp_pal,xjust = 0,yjust=0,bty='n')
# title("sample name")
mtext(side=4,"sample name",adj = 1)
text(0, 0, "This is\nthe center", cex = 1.5,line=-1)
text(0, 0, "This is\nthe center", cex = 1.5,lines=-1)
# title("sample name")
mtext(side=4,"sample name",adj = 1,line=-2)
# title("sample name")
mtext(side=4,"sample name",adj = 1,outer = T)
circos(StVstyle=2)
# title("sample name")
mtext(side=4,"sample name",adj = 1,outer = T,line=2)
# title("sample name")
mtext(side=4,"sample name",adj = 1,outer = T,line=-2)
# title("sample name")
mtext(side=3,"sample name",adj = 1,outer = T,line=-2)
# title("sample name")
mtext(side=3,"sample name",adj = 0,outer = T,line=-2)
# title("sample name")
mtext(side=3,"sample name",adj = 0,outer = T,line=-2,padj = 1)
# title("sample name")
mtext(side=3,"sample name",outer = T,line=-2)
# title("sample name")
mtext(side=3,"sample name",outer = T,line=-2,adj = 0.1)
# title("sample name")
mtext(side=3,"sample name",outer = T,line=-2,adj = 0.1,cex=2,font=2)
# title("sample name")
mtext(side=3,"sample name",outer = T,line=-2,adj = 0.1,cex=1.2,font=2)
circos(StVstyle=2)
# title("sample name")
mtext(side=3,"sample name",outer = T,line=-2,adj = 0.1,cex=1.5,font=2)
lgd1=legend("bottomleft",lty=1, legend=names(line_pal),col=line_pal,bty='n')
lgd2=legend(lgd1$rect$left,lgd1$rect$top,pch=21, legend=names(snp_pal),pt.bg=snp_pal,xjust = 0,yjust=0,bty='n')
text(0, 0, "This is\nthe center", cex = 1.5)
text(0.2, 0.2, "*", cex = 1.5)
text(0, 0, "text & astricks\nanywhere!", cex = 1.5)
circos(StVstyle=2)
# title("sample name")
mtext(side=3,"sample name",outer = T,line=-2,adj = 0.1,cex=1.5,font=2)
text(0, 0, "text & astricks\nanywhere!", cex = 1.5)
text(0.2, 0.2, "*", cex = 1.5)
lgd1=legend("bottomleft",lty=1, legend=names(line_pal),col=line_pal,bty='n')
lgd2=legend(lgd1$rect$left,lgd1$rect$top,pch=21, legend=names(snp_pal),pt.bg=snp_pal,xjust = 0,yjust=0,bty='n')
text(0, -0.2, "text & astricks\nanywhere!", cex = 1.5)
text(-0.1, 0.2, "*", cex = 1.5)
text(-0.2, 0, "*", cex = 1.5)
text(-0.2, 0.05, "*", cex = 1.5)
text(-0.2, 0.07, "*", cex = 1.5)
circos(StVstyle=2)
# title("sample name")
mtext(side=3,"sample name",outer = T,line=-2,adj = 0.1,cex=1.5,font=2)
text(0, -0.2, "texts & astricks\nanywhere!", cex = 1.5)
text(-0.2, 0.07, "*", cex = 1.5)
lgd1=legend("bottomleft",lty=1, legend=names(line_pal),col=line_pal,bty='n')
lgd2=legend(lgd1$rect$left,lgd1$rect$top,pch=21, legend=names(snp_pal),pt.bg=snp_pal,xjust = 0,yjust=0,bty='n')
# random type for demo
FF37.StV$type <- ifelse(FF37.StV$chr == FF37.StV$chr_, sample(c("5'-5'","3'-3'","3'-5'","5'-3'"),nrow(FF37.StV),replace=T),"Interchromosomal")
# try to edit the function in your way
circos <- function(SNV=FF37.SNV, # chr("chr1"...), start, end, type("C>A","C>T"....)
CNV=FF37.CNV, # chr("chr1"...), start, end, tCN(total copy number)
StV=FF37.StV, # chr, start, end, chr_, start_, end_, type("5'-5'","3'-3'","3'-5'","5'-3'","Interchromosomal")
StVstyle=c(1,2,3)[1],
snp_pal = c("C>A"="#15A0EC",# blue
"C>G"="#0D0C1B",#black
"C>T"="#F23A29",#red
"T>A"="#A1A1A1",#grey
"T>C"="#5AB440",#green
"T>G"="#F2BBC5"),
line_pal = c("5'-5'"="purple",
"3'-3'"="green",
"3'-5'"="red",
"5'-3'"="blue",
"Interchromosomal"="purple")){
circos.clear()
circos.par("start.degree" = 90, # start from 12 oclock direction
cell.padding	=c(0.00, 1.00, 0.00, 1.00)) # exact ylim will be applied
# ideogram
circos.initializeWithIdeogram(plotType = NULL,chromosome.index = unique(SNV$chr))
circos.genomicIdeogram(track.height = 0.05)
circos.track(track.index = get.current.track.index(), panel.fun = function(x, y) {
chr = get.cell.meta.data("sector.index") %>% str_replace("chr","")
xcenter = get.cell.meta.data("xcenter")
ycenter = get.cell.meta.data("ylim")[2]
circos.text(xcenter, ycenter, chr,adj = c(0.5,-1.0)) # adj = position of  chromosome label
# circos.genomicAxis(h = "top") # for ticks and axis (coordinates)
})
# snp tract
circos.track(factors=unique(SNV$chr), ylim=c(0,1),track.height =0.15,bg.border="#00000030") # initialize empty track
for(chr in unique(SNV$chr)) {
# grey lines in background
for(lvl in c(0.25,0.5,0.75)){
circos.lines(get.cell.meta.data(name="xlim",sector.index = chr), c(lvl,lvl),col="grey", sector.index=chr)
}
# snv points
circos.points(x=SNV[SNV$chr==chr,]$start,
y=SNV[SNV$chr==chr,]$vaf,
sector.index=chr,
col=snp_pal[SNV[SNV$chr==chr,]$type],
pch=20,cex=0.5)
}
# copy number tract
cnv_ymax = ceiling(max(CNV$tCN))
circos.track(factors=unique(SNV$chr), ylim=c(0,cnv_ymax),track.height =0.2,bg.border="#00000030",bg.col="#90efa810")
for(CHR in unique(SNV$chr)) {
# grey lines in background
for(lvl in 1:(cnv_ymax-1)){
circos.lines(get.cell.meta.data(name="xlim",sector.index = CHR), c(lvl,lvl),col="grey", sector.index=CHR)
}
# cnv points
CNV[CNV$chr==CHR,] %>%
with(circos.points(x=(start+end)/2,y=tCN,sector.index=CHR,
col=colorRamp2(c(1,1.5,2.5,3),c("blue","grey","grey","red"))(tCN),
pch=20,cex=0.3))
# black horizontal line at total copy number==2
circos.lines(get.cell.meta.data(name="xlim",sector.index = CHR), c(2,2),col="black", sector.index=CHR)
}
# Structural variation tract
# Can give thickness variable by lwd in order to emphasize some structural variations.
# baseline1==1: 1 layer StV plot
# baseline1==2: 2 layer StV plot
# baseline1==3: 4 layer StV plot
if(StVstyle == 1){
baseline1=get.cell.meta.data("cell.bottom.radius")
baseline2=get.cell.meta.data("cell.bottom.radius")
height1=0.1
height2=0.1
}else if(StVstyle == 2){
height1=0.035
height2=-0.035
circos.track(factors=unique(SNV$chr), ylim=c(0,2),track.height =0.1,bg.border="#00000000")
baseline1=(get.cell.meta.data("cell.bottom.radius")+get.cell.meta.data("cell.top.radius"))/2
baseline2=baseline1
for(CHR in unique(SNV$chr)) {
circos.lines(get.cell.meta.data(name="xlim",sector.index = CHR), c(1,1),col="#00000030", sector.index=CHR)
}
}else if(StVstyle == 3){
height1=0.035
height2=-0.035
circos.track(factors=unique(SNV$chr), ylim=c(0,4),track.height =0.14,bg.border="#00000000")
baseline1=(get.cell.meta.data("cell.bottom.radius")+3*get.cell.meta.data("cell.top.radius"))/4
baseline2=(get.cell.meta.data("cell.bottom.radius")*3+get.cell.meta.data("cell.top.radius"))/4
for(CHR in unique(SNV$chr)) {
circos.lines(get.cell.meta.data(name="xlim",sector.index = CHR), c(1,1),col="#00000030", sector.index=CHR)
circos.lines(get.cell.meta.data(name="xlim",sector.index = CHR), c(3,3),col="#00000030", sector.index=CHR)
}
}
for (i in 1:nrow(StV)){
circos.link(sector.index1 = StV$chr[i], c(StV$start[i], StV$end[i]),
sector.index2 = StV$chr_[i], c(StV$start_[i], StV$end_[i]),
col = line_pal[StV$type[i]],
h=switch(StV$type[i],"5'-5'"=height1,"3'-3'"=height1,"5'-3'"=height2,"3'-5'"=height2,"Interchromosomal"=NULL),
rou=ifelse(StV$type[i] %in% c("5'-5'","3'-3'"), baseline1,baseline2))
}
}
library(readr)
library(dplyr)
library(stringr)
library(circlize)
# prep data in your convenient way
snv = readr::read_tsv("~/Projects/team_projects/SOP/circos/LU-FF37.subs_scatter.txt",col_names=F) %>%
mutate(X1 = str_replace(X1,"hs","chr"), X5=str_replace(X5,"color=","")) %>%
mutate(X5 = c("black"="black","blue"="#68AFD9","dred"="#EE3B2C","green"="#71C573","grey"="grey",
"rdpu-5-seq-3"="#FA69A7")[X5])
cnv = readr::read_tsv("~/Projects/team_projects/SOP/circos/LU-FF37.absCN_scatter.txt",col_names=F) %>%
mutate(X1 = str_replace(X1,"hs","chr"))
svlink=readr::read_tsv("~/Projects/team_projects/SOP/circos/LU-FF37.SVclust_link.txt",
col_names=F) %>%
mutate(X1 = str_replace(X1,"hs","chr"),
X4 = str_replace(X4,"hs","chr"),
color = str_replace(X7,"color=","") %>% str_replace(",.*","") %>% as.factor()) %>%
mutate(color = RColorBrewer::brewer.pal(9,"Set1")[as.numeric(color)])
filepaths <- c("~/Projects/team_projects/SOP/circos/LU-FF37.subs_scatter.txt",
"~/Projects/team_projects/SOP/circos/LU-FF37.absCN_scatter.txt",
"~/Projects/team_projects/SOP/circos/LU-FF37.SVclust_link.txt")
FF37.SNV <- read_tsv(filepaths[1], col_names=c("chr","start","end","tCN"))
FF37.CNV <- read_tsv(filepaths[2], col_names=c("chr","start","end","vaf","color"))
FF37.StV <- read_tsv(filepaths[3], col_names=c("chr","start","end","chr_","start_","end_","color"))
FF37.SNV$chr <-str_replace(FF37.SNV$chr, "hs", "chr")
FF37.CNV$chr <-str_replace(FF37.CNV$chr, "hs", "chr")
FF37.StV$chr <-str_replace(FF37.StV$chr, "hs", "chr")
FF37.SNV$type <- structure(c("C>A","C>T","T>A","T>C","C>G","T>G"),
names = c("color=blue","color=dred","color=grey","color=green",
"color=black","color=rdpu-5-seq-3"))[FF37.SNV$color]
snv = readr::read_tsv("~/Projects/team_projects/SOP/circos/LU-FF37.subs_scatter.txt",col_names=F) %>%
mutate(X1 = str_replace(X1,"hs","chr"), X5=str_replace(X5,"color=","")) %>%
mutate(X5 = c("black"="black","blue"="#68AFD9","dred"="#EE3B2C","green"="#71C573","grey"="grey",
"rdpu-5-seq-3"="#FA69A7")[X5])
cnv = readr::read_tsv("~/Projects/team_projects/SOP/circos/LU-FF37.absCN_scatter.txt",col_names=F) %>%
mutate(X1 = str_replace(X1,"hs","chr"))
svlink=readr::read_tsv("~/Projects/team_projects/SOP/circos/LU-FF37.SVclust_link.txt",
col_names=F) %>%
mutate(X1 = str_replace(X1,"hs","chr"),
X4 = str_replace(X4,"hs","chr"),
color = str_replace(X7,"color=","") %>% str_replace(",.*","") %>% as.factor()) %>%
mutate(color = RColorBrewer::brewer.pal(9,"Set1")[as.numeric(color)])
filepaths <- c("~/Projects/team_projects/SOP/circos/LU-FF37.subs_scatter.txt",
"~/Projects/team_projects/SOP/circos/LU-FF37.absCN_scatter.txt",
"~/Projects/team_projects/SOP/circos/LU-FF37.SVclust_link.txt")
FF37.SNV <- read_tsv(filepaths[1], col_names=c("chr","start","end","tCN"))
FF37.CNV <- read_tsv(filepaths[2], col_names=c("chr","start","end","vaf","color"))
FF37.StV <- read_tsv(filepaths[3], col_names=c("chr","start","end","chr_","start_","end_","color"))
FF37.SNV$chr <-str_replace(FF37.SNV$chr, "hs", "chr")
FF37.CNV$chr <-str_replace(FF37.CNV$chr, "hs", "chr")
FF37.StV$chr <-str_replace(FF37.StV$chr, "hs", "chr")
FF37.SNV$type <- structure(c("C>A","C>T","T>A","T>C","C>G","T>G"),
names = c("color=blue","color=dred","color=grey","color=green",
"color=black","color=rdpu-5-seq-3"))[FF37.SNV$color]
FF37.SNV
FF37.SNV <- read_tsv(filepaths[1], col_names=c("chr","start","end","vaf","color"))
FF37.CNV <- read_tsv(filepaths[2], col_names=c("chr","start","end","tCN"))
FF37.StV <- read_tsv(filepaths[3], col_names=c("chr","start","end","chr_","start_","end_","color"))
FF37.SNV$chr <-str_replace(FF37.SNV$chr, "hs", "chr")
FF37.CNV$chr <-str_replace(FF37.CNV$chr, "hs", "chr")
FF37.StV$chr <-str_replace(FF37.StV$chr, "hs", "chr")
FF37.SNV$type <- structure(c("C>A","C>T","T>A","T>C","C>G","T>G"),
names = c("color=blue","color=dred","color=grey","color=green",
"color=black","color=rdpu-5-seq-3"))[FF37.SNV$color]
# random type for demo
FF37.StV$type <- ifelse(FF37.StV$chr == FF37.StV$chr_, sample(c("5'-5'","3'-3'","3'-5'","5'-3'"),nrow(FF37.StV),replace=T),"Interchromosomal")
head(FF37.SNV)
head(FF37.CNV)
head(FF37.StV)
FF37.StV$chr_ <-str_replace(FF37.StV$chr_, "hs", "chr")
FF37.SNV$type <- structure(c("C>A","C>T","T>A","T>C","C>G","T>G"),
names = c("color=blue","color=dred","color=grey","color=green",
"color=black","color=rdpu-5-seq-3"))[FF37.SNV$color]
# random type for demo
FF37.StV$type <- ifelse(FF37.StV$chr == FF37.StV$chr_, sample(c("5'-5'","3'-3'","3'-5'","5'-3'"),nrow(FF37.StV),replace=T),"Interchromosomal")
head(FF37.SNV)
head(FF37.CNV)
head(FF37.StV)
# try to edit the function in your way
circos <- function(SNV=FF37.SNV, # chr("chr1"...), start, end, type("C>A","C>T"....)
CNV=FF37.CNV, # chr("chr1"...), start, end, tCN(total copy number)
StV=FF37.StV, # chr, start, end, chr_, start_, end_, type("5'-5'","3'-3'","3'-5'","5'-3'","Interchromosomal")
StVstyle=c(1,2,3)[1],
snp_pal = c("C>A"="#15A0EC",# blue
"C>G"="#0D0C1B",#black
"C>T"="#F23A29",#red
"T>A"="#A1A1A1",#grey
"T>C"="#5AB440",#green
"T>G"="#F2BBC5"),
line_pal = c("5'-5'"="purple",
"3'-3'"="green",
"3'-5'"="red",
"5'-3'"="blue",
"Interchromosomal"="purple")){
circos.clear()
circos.par("start.degree" = 90, # start from 12 oclock direction
cell.padding	=c(0.00, 1.00, 0.00, 1.00)) # exact ylim will be applied
# ideogram
circos.initializeWithIdeogram(plotType = NULL,chromosome.index = unique(SNV$chr))
circos.genomicIdeogram(track.height = 0.05)
circos.track(track.index = get.current.track.index(), panel.fun = function(x, y) {
chr = get.cell.meta.data("sector.index") %>% str_replace("chr","")
xcenter = get.cell.meta.data("xcenter")
ycenter = get.cell.meta.data("ylim")[2]
circos.text(xcenter, ycenter, chr,adj = c(0.5,-1.0)) # adj = position of  chromosome label
# circos.genomicAxis(h = "top") # for ticks and axis (coordinates)
})
# snp tract
circos.track(factors=unique(SNV$chr), ylim=c(0,1),track.height =0.15,bg.border="#00000030") # initialize empty track
for(chr in unique(SNV$chr)) {
# grey lines in background
for(lvl in c(0.25,0.5,0.75)){
circos.lines(get.cell.meta.data(name="xlim",sector.index = chr), c(lvl,lvl),col="grey", sector.index=chr)
}
# snv points
circos.points(x=SNV[SNV$chr==chr,]$start,
y=SNV[SNV$chr==chr,]$vaf,
sector.index=chr,
col=snp_pal[SNV[SNV$chr==chr,]$type],
pch=20,cex=0.5)
}
# copy number tract
cnv_ymax = ceiling(max(CNV$tCN))
circos.track(factors=unique(SNV$chr), ylim=c(0,cnv_ymax),track.height =0.2,bg.border="#00000030",bg.col="#90efa810")
for(CHR in unique(SNV$chr)) {
# grey lines in background
for(lvl in 1:(cnv_ymax-1)){
circos.lines(get.cell.meta.data(name="xlim",sector.index = CHR), c(lvl,lvl),col="grey", sector.index=CHR)
}
# cnv points
CNV[CNV$chr==CHR,] %>%
with(circos.points(x=(start+end)/2,y=tCN,sector.index=CHR,
col=colorRamp2(c(1,1.5,2.5,3),c("blue","grey","grey","red"))(tCN),
pch=20,cex=0.3))
# black horizontal line at total copy number==2
circos.lines(get.cell.meta.data(name="xlim",sector.index = CHR), c(2,2),col="black", sector.index=CHR)
}
# Structural variation tract
# Can give thickness variable by lwd in order to emphasize some structural variations.
# baseline1==1: 1 layer StV plot
# baseline1==2: 2 layer StV plot
# baseline1==3: 4 layer StV plot
if(StVstyle == 1){
baseline1=get.cell.meta.data("cell.bottom.radius")
baseline2=get.cell.meta.data("cell.bottom.radius")
height1=0.1
height2=0.1
}else if(StVstyle == 2){
height1=0.035
height2=-0.035
circos.track(factors=unique(SNV$chr), ylim=c(0,2),track.height =0.1,bg.border="#00000000")
baseline1=(get.cell.meta.data("cell.bottom.radius")+get.cell.meta.data("cell.top.radius"))/2
baseline2=baseline1
for(CHR in unique(SNV$chr)) {
circos.lines(get.cell.meta.data(name="xlim",sector.index = CHR), c(1,1),col="#00000030", sector.index=CHR)
}
}else if(StVstyle == 3){
height1=0.035
height2=-0.035
circos.track(factors=unique(SNV$chr), ylim=c(0,4),track.height =0.14,bg.border="#00000000")
baseline1=(get.cell.meta.data("cell.bottom.radius")+3*get.cell.meta.data("cell.top.radius"))/4
baseline2=(get.cell.meta.data("cell.bottom.radius")*3+get.cell.meta.data("cell.top.radius"))/4
for(CHR in unique(SNV$chr)) {
circos.lines(get.cell.meta.data(name="xlim",sector.index = CHR), c(1,1),col="#00000030", sector.index=CHR)
circos.lines(get.cell.meta.data(name="xlim",sector.index = CHR), c(3,3),col="#00000030", sector.index=CHR)
}
}
for (i in 1:nrow(StV)){
circos.link(sector.index1 = StV$chr[i], c(StV$start[i], StV$end[i]),
sector.index2 = StV$chr_[i], c(StV$start_[i], StV$end_[i]),
col = line_pal[StV$type[i]],
h=switch(StV$type[i],"5'-5'"=height1,"3'-3'"=height1,"5'-3'"=height2,"3'-5'"=height2,"Interchromosomal"=NULL),
rou=ifelse(StV$type[i] %in% c("5'-5'","3'-3'"), baseline1,baseline2))
}
}
circos(SNV=FF37.SNV, # chr("chr1"...), start, end, type("C>A","C>T"....)
CNV=FF37.CNV, # chr("chr1"...), start, end, tCN(total copy number)
StV=FF37.StV, # chr, start, end, chr_, start_, end_, type("5'-5'","3'-3'","3'-5'","5'-3'","Interchromosomal")
StVstyle=2)
# title("sample name")
mtext(side=3,"sample name",outer = T,line=-2,adj = 0.1,cex=1.5,font=2)
circos(StVstyle=2)
